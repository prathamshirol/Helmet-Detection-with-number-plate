# -*- coding: utf-8 -*-
"""helmet (1) (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_VD1BQfheT0jLTB_7JhXp1D7eDjY_pST
"""

from google.colab import drive
drive.mount('/content/drive')

pip install ultralytics

from ultralytics import YOLO

model = YOLO("yolov8n.pt")

from ultralytics import YOLO

# Assuming you have trained your model with the following code
model = YOLO("yolov8n.pt")
model.train(data='/content/drive/MyDrive/number plate detection.v2i.yolov8/data.yaml', epochs=200)

import cv2
from ultralytics import YOLO
import matplotlib.pyplot as plt

# Load the trained model
model = YOLO("/content/best (2).pt")

# Path to the input image
image_path = '/content/drive/MyDrive/number plate detection.v2i.yolov8/test/images/IMG-20240606-WA0019_jpg.rf.0c95b61c81e1bab70f2759dfb476f4f2.jpg'

# Make predictions
results = model.predict(source=image_path)

# Extracting the image with bounding boxes and labels
annotated_frame = results[0].plot()

# Convert BGR image to RGB
annotated_frame = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)

# Display the image with the detections
plt.imshow(annotated_frame)
plt.axis('off')  # Hide the axis
plt.show()

from ultralytics import YOLO
import cv2
import matplotlib.pyplot as plt

# Load the trained model
model = YOLO("/content/runs/detect/train/weights/best.pt")  # Replace with your trained model's path

# Function to make predictions and display the output image with labels
def predict_and_display(image_path):
    # Load the image
    img = cv2.imread(image_path)

    # Make predictions
    results = model(img)

    # Extract predictions
    predictions = results[0]  # results is a list, take the first element
    boxes = predictions.boxes  # Extract bounding boxes

    number_plate_region = None

    # Draw predictions on the image
    for box in boxes:
        x1, y1, x2, y2 = map(int, box.xyxy[0])  # Bounding box coordinates
        conf = box.conf[0]  # Confidence score
        cls = int(box.cls[0])  # Class index
        label = f"{model.names[cls]}: {conf:.2f}"

        # Draw rectangle
        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
        # Put label
        cv2.putText(img, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

        # Check if the class is "number plate"
        if cls == 2:  # The class index for "number plate" is 2
            number_plate_region = img[y1:y2, x1:x2]

    # Convert BGR to RGB for displaying using matplotlib
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    # Display the output image
    plt.imshow(img)
    plt.axis('off')
    plt.show()

    if number_plate_region is not None:
        # Convert the number plate region to RGB
        number_plate_region = cv2.cvtColor(number_plate_region, cv2.COLOR_BGR2RGB)

        # Display the number plate region
        plt.imshow(number_plate_region)
        plt.title('Detected Number Plate')
        plt.axis('off')
        plt.show()
    else:
        print("No number plate detected.")

# Example usage
predict_and_display("/content/drive/MyDrive/number plate detection.v2i.yolov8/test/images/IMG-20240606-WA0019_jpg.rf.0c95b61c81e1bab70f2759dfb476f4f2.jpg")

!sudo apt-get update
!sudo apt-get install -y tesseract-ocr
!pip install pytesseract

